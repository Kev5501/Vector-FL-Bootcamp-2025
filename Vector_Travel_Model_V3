{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b849067f-6d28-46a2-91e6-242d9a005182",
   "metadata": {},
   "source": [
    "# Vector Project - Centralized Unsupervised Classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aff84861-24d4-4e02-a001-67a64d77dd2e",
   "metadata": {},
   "source": [
    "## Installs and Import"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7eabb456-0b3c-4e47-b4c0-27fbb51ac798",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Looking in indexes: https://artifactory.fg.rbc.com/artifactory/api/pypi/pypi-remote/simple, https://artifactory.fg.rbc.com/artifactory/api/pypi/pypi/simple\n",
      "Collecting tabulate\n",
      "  Downloading https://artifactory.fg.rbc.com/artifactory/api/pypi/pypi/packages/packages/40/44/4a5f08c96eb108af5cb50b41f76142f0afa346dfa99d5296fe7202a11854/tabulate-0.9.0-py3-none-any.whl (35 kB)\n",
      "Installing collected packages: tabulate\n",
      "Successfully installed tabulate-0.9.0\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "#pip install tabulate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "99b2bf10-94d1-4d7a-ac60-bc5ac747bc39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Looking in indexes: https://artifactory.fg.rbc.com/artifactory/api/pypi/pypi-remote/simple, https://artifactory.fg.rbc.com/artifactory/api/pypi/pypi/simple\n",
      "\u001b[31mERROR: Could not find a version that satisfies the requirement sickit-learn (from versions: none)\u001b[0m\u001b[31m\n",
      "\u001b[0m\u001b[31mERROR: No matching distribution found for sickit-learn\u001b[0m\u001b[31m\n",
      "\u001b[0mNote: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "#pip install sickit-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7c95ff06-0fdb-422f-8530-5b8c21353f7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import StandardScaler, minmax_scale\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.model_selection import ParameterGrid\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import silhouette_score\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa34027d-8480-4cf9-a41e-1e52e09b583c",
   "metadata": {},
   "source": [
    "## Data Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ce27690a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import Data\n",
    "df_v3 = pd.read_excel(\"/projects/federated_learning/RBC1/RBC_Synthetic_Data/20250314_synthetic_flight_data_v3_50000.xlsx\")\n",
    "df_v4 = pd.read_excel(\"/projects/federated_learning/RBC1/RBC_Synthetic_Data/20250314_synthetic_flight_data_v4_50000.xlsx\")\n",
    "df_v5 = pd.read_excel(\"/projects/federated_learning/RBC1/RBC_Synthetic_Data/20250314_synthetic_flight_data_v5_50000.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d43fccb2-ffde-4a4d-8622-bdaec57cf854",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data Exploration:\n",
      "\n",
      "Shape of the combined DataFrame: (101000, 24)\n",
      "\n",
      "Data types of each column:\n",
      " Date                     datetime64[ns]\n",
      "sales_channel                    object\n",
      "trip_type                        object\n",
      "purchase_lead                     int64\n",
      "length_of_stay                    int64\n",
      "flight_hour                       int64\n",
      "flight_day                       object\n",
      "origin                           object\n",
      "destination                      object\n",
      "wants_extra_baggage               int64\n",
      "wants_preferred_seat              int64\n",
      "wants_in_flight_meals             int64\n",
      "flight_duration                 float64\n",
      "booking_complete                  int64\n",
      "airline_carrier                  object\n",
      "age                               int64\n",
      "gender                           object\n",
      "credit_score                      int64\n",
      "income                            int64\n",
      "social_group                     object\n",
      "life_stage                       object\n",
      "ticket_type                      object\n",
      "client_segment                   object\n",
      "flight_cost                      object\n",
      "dtype: object\n",
      "\n",
      "Descriptive statistics of the combined DataFrame:\n",
      " |       | Date                          | purchase_lead   | length_of_stay   | flight_hour   | wants_extra_baggage   | wants_preferred_seat   | wants_in_flight_meals   | flight_duration   | booking_complete   | age     | credit_score   | income   |\n",
      "|:------|:------------------------------|:----------------|:-----------------|:--------------|:----------------------|:-----------------------|:------------------------|:------------------|:-------------------|:--------|:---------------|:---------|\n",
      "| count | 101000                        | 101000          | 101000           | 101000        | 101000                | 101000                 | 101000                  | 101000            | 101000             | 101000  | 101000         | 101000   |\n",
      "| mean  | 2025-02-26 11:48:55.318811904 | 182.511         | 8.06881          | 11.4912       | 0.499099              | 0.502218               | 0.50195                 | 9.63278           | 0.500089           | 39.4539 | 729.911        | 112169   |\n",
      "| min   | 2025-02-12 00:00:00           | 1               | -9               | 0             | 0                     | 0                      | 0                       | 1                 | 0                  | 4       | 559            | -12437   |\n",
      "| 25%   | 2025-02-19 00:00:00           | 91              | 2                | 5             | 0                     | 0                      | 0                       | 4.7               | 0                  | 27      | 644            | 70486.8  |\n",
      "| 50%   | 2025-02-27 00:00:00           | 183             | 6                | 11            | 0                     | 1                      | 1                       | 9.2               | 1                  | 36      | 730            | 106124   |\n",
      "| 75%   | 2025-03-06 00:00:00           | 274             | 14               | 17            | 1                     | 1                      | 1                       | 14.5              | 1                  | 52      | 816            | 149531   |\n",
      "| max   | 2025-03-13 00:00:00           | 364             | 37               | 23            | 1                     | 1                      | 1                       | 20                | 1                  | 94      | 900            | 300490   |\n",
      "| std   | nan                           | 105.276         | 6.6669           | 6.92618       | 0.500002              | 0.499998               | 0.499999                | 5.62713           | 0.500002           | 14.9921 | 98.862         | 52368.9  |\n"
     ]
    }
   ],
   "source": [
    "# Combine the three DataFrames into one\n",
    "combined_df = pd.concat([df_v3, df_v4, df_v5], ignore_index=True)\n",
    "# 1. Data Exploration\n",
    "print(\"Data Exploration:\\n\")\n",
    "print(\"Shape of the combined DataFrame:\", combined_df.shape)\n",
    "print(\"\\nData types of each column:\\n\", combined_df.dtypes)\n",
    "print(\"\\nDescriptive statistics of the combined DataFrame:\\n\", combined_df.describe().to_markdown(numalign=\"left\", stralign=\"left\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7779ec59",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fix boolean columns back to int\n",
    "bool_cols = [col for col in combined_df.columns if combined_df[col].dtype == 'bool']\n",
    "\n",
    "for i in range(len(bool_cols)):\n",
    "    combined_df[bool_cols[i]] = combined_df[bool_cols[i]].astype(int)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53591091-5901-48fd-b78d-3deb2fc13133",
   "metadata": {},
   "source": [
    "## Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "426c0166-4864-41c2-927d-501aee94a486",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Feature Engineering:\n",
      "\n",
      "\n",
      "Shape of the transformed DataFrame: (150000, 49)\n"
     ]
    }
   ],
   "source": [
    "# Feature Engineering\n",
    "print(\"\\nFeature Engineering:\\n\")\n",
    "\n",
    "# Convert flight_cost to numeric categories 1-4\n",
    "def convert_flight_cost(cost_str):\n",
    "    if cost_str == '$':\n",
    "        return 1\n",
    "    elif cost_str == '$$':\n",
    "        return 2\n",
    "    elif cost_str == '$$$':\n",
    "        return 3\n",
    "    elif cost_str == '$$$$':\n",
    "        return 4\n",
    "    else:\n",
    "        return None  # Handle potential errors or unknown values\n",
    "\n",
    "combined_df['flight_cost_num'] = combined_df['flight_cost'].apply(convert_flight_cost)\n",
    "combined_df['flight_cost_num'] = combined_df['flight_cost_num'].fillna(combined_df['flight_cost_num'].mode()[0])\n",
    "\n",
    "# Create dummy variables for flight_cost_num - not needed for ordinal data\n",
    "#combined_df = pd.get_dummies(combined_df, columns=['flight_cost_num'], prefix='flight_cost', drop_first=True)\n",
    "\n",
    "# Date to Day of Year (Cyclical Representation)\n",
    "combined_df['Date'] = pd.to_datetime(combined_df['Date'])\n",
    "days_in_year = combined_df['Date'].dt.isocalendar().day.max()\n",
    "\n",
    "#Date to week of year\n",
    "combined_df['week_num'] = combined_df['Date'].dt.isocalendar().week\n",
    "\n",
    "#combined_df['Day_of_Year_sin'] = np.sin(2 * np.pi * combined_df['Date'].dt.isocalendar().day / days_in_year) #date sin\n",
    "#combined_df['Day_of_Year_cos'] = np.cos(2 * np.pi * combined_df['Date'].dt.isocalendar().day / days_in_year) #date cos\n",
    "\n",
    "# Flight Day to Weekday/Weekend\n",
    "combined_df['Day_Type'] = combined_df['flight_day'].apply(lambda x: 'Weekend' if x in ['Saturday', 'Sunday'] else 'Weekday')\n",
    "\n",
    "# Origin/Destination to Hub/Not Hub (Example hub list - this can be expanded)\n",
    "#major_hubs = ['London', 'Chicago', 'Los Angeles', 'New York', 'San Francisco', 'Toronto']\n",
    "\n",
    "#def is_hub(city):\n",
    "#    return 'Hub' if city in major_hubs else 'Not_Hub'\n",
    "#\n",
    "#combined_df['Origin_Hub'] = combined_df['origin'].apply(is_hub)\n",
    "#combined_df['Destination_Hub'] = combined_df['destination'].apply(is_hub)\n",
    "\n",
    "# Airline Carrier to Premium/Discount (Example mapping - this can be expanded)\n",
    "#airline_mapping = {\n",
    "#    'United Airlines': 'Premium',\n",
    "#    'Westjet': 'Discount',\n",
    "#    'Air India': 'Discount',\n",
    "#    'Emirates': 'Premium',\n",
    "#    'British Airways': 'Premium',\n",
    "#    'Lufthansa': 'Premium',\n",
    "#    'Southwest': 'Discount'\n",
    "#}\n",
    "\n",
    "#combined_df['Airline_Type'] = combined_df['airline_carrier'].map(airline_mapping).fillna('Other')  # Handle airlines not in the mapping\n",
    "\n",
    "# Drop original columns\n",
    "#combined_df = combined_df.drop(columns=['Date', 'flight_day', 'origin', 'destination', 'airline_carrier', 'flight_cost'])\n",
    "combined_df = combined_df.drop(columns=['Date', 'flight_day','flight_cost']) #revised\n",
    "\n",
    "# Identify categorical columns for one-hot encoding (after transformations)\n",
    "categorical_cols = [col for col in combined_df.columns if combined_df[col].dtype == 'object']\n",
    "\n",
    "# Perform one-hot encoding\n",
    "combined_df = pd.get_dummies(combined_df, columns=categorical_cols, drop_first=True)\n",
    "\n",
    "# Display the shape of the transformed DataFrame\n",
    "print(\"\\nShape of the transformed DataFrame:\", combined_df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "09d15235-728b-4ea9-9746-bce8b722a2bd",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>purchase_lead</th>\n",
       "      <th>length_of_stay</th>\n",
       "      <th>flight_hour</th>\n",
       "      <th>wants_extra_baggage</th>\n",
       "      <th>wants_preferred_seat</th>\n",
       "      <th>wants_in_flight_meals</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>booking_complete</th>\n",
       "      <th>age</th>\n",
       "      <th>credit_score</th>\n",
       "      <th>...</th>\n",
       "      <th>airline_carrier_Westjet</th>\n",
       "      <th>gender_Male</th>\n",
       "      <th>social_group_Urban</th>\n",
       "      <th>life_stage_Parent</th>\n",
       "      <th>life_stage_Retired</th>\n",
       "      <th>life_stage_Single</th>\n",
       "      <th>life_stage_Young Professional</th>\n",
       "      <th>ticket_type_economy</th>\n",
       "      <th>client_segment_premium</th>\n",
       "      <th>Day_Type_Weekend</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>172</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6.5</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>661</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>43</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6.5</td>\n",
       "      <td>0</td>\n",
       "      <td>46</td>\n",
       "      <td>586</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.6</td>\n",
       "      <td>1</td>\n",
       "      <td>23</td>\n",
       "      <td>674</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>249</td>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>12.7</td>\n",
       "      <td>0</td>\n",
       "      <td>56</td>\n",
       "      <td>679</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>182</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11.5</td>\n",
       "      <td>0</td>\n",
       "      <td>55</td>\n",
       "      <td>799</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 49 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   purchase_lead  length_of_stay  flight_hour  wants_extra_baggage  \\\n",
       "0            172              10            2                    1   \n",
       "1             43               3            2                    0   \n",
       "2             31               0            4                    1   \n",
       "3            249               2           17                    0   \n",
       "4            182               0            0                    0   \n",
       "\n",
       "   wants_preferred_seat  wants_in_flight_meals  flight_duration  \\\n",
       "0                     1                      1              6.5   \n",
       "1                     1                      1              6.5   \n",
       "2                     0                      0              5.6   \n",
       "3                     0                      1             12.7   \n",
       "4                     0                      0             11.5   \n",
       "\n",
       "   booking_complete  age  credit_score  ...  airline_carrier_Westjet  \\\n",
       "0                 0   22           661  ...                        0   \n",
       "1                 0   46           586  ...                        1   \n",
       "2                 1   23           674  ...                        0   \n",
       "3                 0   56           679  ...                        0   \n",
       "4                 0   55           799  ...                        0   \n",
       "\n",
       "   gender_Male  social_group_Urban  life_stage_Parent  life_stage_Retired  \\\n",
       "0            1                   1                  1                   0   \n",
       "1            1                   0                  0                   0   \n",
       "2            0                   1                  0                   0   \n",
       "3            1                   1                  0                   0   \n",
       "4            0                   0                  0                   0   \n",
       "\n",
       "   life_stage_Single  life_stage_Young Professional  ticket_type_economy  \\\n",
       "0                  0                              0                    1   \n",
       "1                  0                              0                    0   \n",
       "2                  0                              1                    0   \n",
       "3                  0                              0                    1   \n",
       "4                  1                              0                    1   \n",
       "\n",
       "   client_segment_premium  Day_Type_Weekend  \n",
       "0                       0                 1  \n",
       "1                       0                 0  \n",
       "2                       0                 1  \n",
       "3                       1                 0  \n",
       "4                       0                 1  \n",
       "\n",
       "[5 rows x 49 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display the first 5 rows of the transformed DataFrame\n",
    "combined_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15e8da46-5338-408d-a9d9-09fe9b882742",
   "metadata": {},
   "source": [
    "## PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d082074d-9744-47a4-b886-2237fb15af48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "PCA for Feature Selection:\n",
      "\n",
      "\n",
      "Explained variance ratio with feature names:\n",
      "\n",
      "| Component   | Explained Variance   | Feature               |\n",
      "|:------------|:---------------------|:----------------------|\n",
      "| 1           | 0.0384935            | purchase_lead         |\n",
      "| 2           | 0.0306222            | length_of_stay        |\n",
      "| 3           | 0.0255827            | flight_hour           |\n",
      "| 4           | 0.0255481            | wants_extra_baggage   |\n",
      "| 5           | 0.0255235            | wants_preferred_seat  |\n",
      "| 6           | 0.0251893            | wants_in_flight_meals |\n",
      "| 7           | 0.0240997            | flight_duration       |\n",
      "| 8           | 0.023926             | booking_complete      |\n",
      "| 9           | 0.0238853            | age                   |\n",
      "| 10          | 0.0238393            | credit_score          |\n",
      "| 11          | 0.0238198            | income                |\n",
      "| 12          | 0.0237941            | flight_cost_num       |\n",
      "| 13          | 0.0232496            | week_num              |\n",
      "| 14          | 0.0228196            | sales_channel_Online  |\n",
      "| 15          | 0.0227504            | trip_type_One Way     |\n",
      "| 16          | 0.0227147            | trip_type_Round Trip  |\n",
      "| 17          | 0.0227037            | origin_Edmonton       |\n",
      "| 18          | 0.0226739            | origin_Halifax        |\n",
      "| 19          | 0.0226622            | origin_Montreal       |\n",
      "| 20          | 0.0226344            | origin_Ottawa         |\n",
      "\n",
      "Cumulative explained variance:\n",
      " [0.03849353 0.06911569 0.09469841 0.12024651 0.14577002 0.1709593\n",
      " 0.19505896 0.21898498 0.24287026 0.26670958 0.29052933 0.31432343\n",
      " 0.33757307 0.3603927  0.38314314 0.40585786 0.42856151 0.45123537\n",
      " 0.47389758 0.49653199 0.51886318 0.54113899 0.56338816 0.58563138\n",
      " 0.60783631 0.62997549 0.65083832 0.67147573 0.6920473  0.7125593\n",
      " 0.73304568 0.75349969 0.77389165 0.79426217 0.81461508 0.8349169\n",
      " 0.85520287 0.87543099 0.89562819 0.91572311 0.93506146 0.95387024\n",
      " 0.97093963 0.98115185 0.98738039 0.99246738 0.99586501 0.99811558\n",
      " 1.        ]\n",
      "\n",
      "Number of components explaining 85% of variance: 37\n"
     ]
    }
   ],
   "source": [
    "# 4. PCA for Feature Selection\n",
    "print(\"\\nPCA for Feature Selection:\\n\")\n",
    "\n",
    "# Separate features (X) from the target variable (if any)\n",
    "X = combined_df  # Assuming all columns are features\n",
    "\n",
    "# Scaling the features\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)\n",
    "\n",
    "# Applying PCA\n",
    "pca = PCA()\n",
    "pca.fit(X_scaled)\n",
    "\n",
    "# Explained variance ratio\n",
    "explained_variance = pca.explained_variance_ratio_\n",
    "\n",
    "# Get feature names\n",
    "feature_names = X.columns\n",
    "\n",
    "# Create a DataFrame to hold explained variance ratios\n",
    "explained_variance_df = pd.DataFrame({'Component': range(1, len(explained_variance) + 1),\n",
    "                                      'Explained Variance': explained_variance})\n",
    "\n",
    "# Assign feature names to components\n",
    "explained_variance_df['Feature'] = feature_names[:len(explained_variance_df)]\n",
    "\n",
    "print(\"\\nExplained variance ratio with feature names:\\n\")\n",
    "print(explained_variance_df.head(20).to_markdown(index=False, numalign=\"left\", stralign=\"left\"))\n",
    "\n",
    "# Cumulative explained variance\n",
    "cumulative_explained_variance = np.cumsum(explained_variance)\n",
    "print(\"\\nCumulative explained variance:\\n\", cumulative_explained_variance)\n",
    "\n",
    "# Determine the number of components that explain 95% of the variance\n",
    "n_components_85 = np.argmax(cumulative_explained_variance >= 0.85) + 1\n",
    "print(f\"\\nNumber of components explaining 85% of variance: {n_components_85}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb0b994a-bba3-4cc6-ba63-6de484fd82b9",
   "metadata": {},
   "source": [
    "## Pre-Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2d09857a-7557-43d1-b346-13c192ca66c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Filter to features accounting for 85% of columative variance\n",
    "relevant_col_list = explained_variance_df['Feature'].values.tolist()[:n_components_85]\n",
    "pca_filtered_df = combined_df.filter(items =  relevant_col_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "efa79b15-23a4-4e9f-995c-8b947474df21",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Normalize values to be between 0 and 1\n",
    "columns_to_scale = [col for col in pca_filtered_df.columns if pca_filtered_df[col].max() > 1]\n",
    "pca_filtered_df[columns_to_scale] = minmax_scale(pca_filtered_df[columns_to_scale])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33e4fb8f-0de0-479e-bf06-5ec57b65bb2e",
   "metadata": {},
   "source": [
    "## Autoencoder (No longer needed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1f34236e-6e43-4494-811e-106026f275fc",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true,
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0/100, Loss: 0.2338\n",
      "Epoch 10/100, Loss: 0.2003\n",
      "Epoch 20/100, Loss: 0.1667\n",
      "Epoch 30/100, Loss: 0.1258\n",
      "Epoch 40/100, Loss: 0.1161\n",
      "Epoch 50/100, Loss: 0.1150\n",
      "Epoch 60/100, Loss: 0.1140\n",
      "Epoch 70/100, Loss: 0.1134\n",
      "Epoch 80/100, Loss: 0.1130\n",
      "Epoch 90/100, Loss: 0.1126\n"
     ]
    }
   ],
   "source": [
    "# Define the Autoencoder\n",
    "# class Autoencoder(nn.Module):\n",
    "#     def __init__(self, input_dim, latent_dim):\n",
    "#         super(Autoencoder, self).__init__()\n",
    "        \n",
    "#         # Encoder\n",
    "#         self.encoder = nn.Sequential(\n",
    "#             nn.Linear(input_dim, 64), nn.ReLU(),\n",
    "#             nn.Linear(64, 32), nn.ReLU(),\n",
    "#             nn.Linear(32, latent_dim)  # Compressed Representation\n",
    "#         )\n",
    "        \n",
    "#         # Decoder\n",
    "#         self.decoder = nn.Sequential(\n",
    "#             nn.Linear(latent_dim, 32), nn.ReLU(),\n",
    "#             nn.Linear(32, 64), nn.ReLU(),\n",
    "#             nn.Linear(64, input_dim)  # Output should match input_dim\n",
    "#         )\n",
    "\n",
    "#     def forward(self, x):\n",
    "#         encoded = self.encoder(x)\n",
    "#         decoded = self.decoder(encoded)\n",
    "#         return decoded, encoded\n",
    "\n",
    "# # Define dimensions\n",
    "# input_dim = pca_filtered_df.shape[1]  # Should match PCA components\n",
    "# latent_dim = 5  # Choose small enough for clustering\n",
    "# model = Autoencoder(input_dim=input_dim, latent_dim=latent_dim)\n",
    "\n",
    "\n",
    "# # Convert PCA-transformed data to tensor\n",
    "# X_tensor = torch.FloatTensor(pca_filtered_df.values)\n",
    "\n",
    "# # Define optimizer and loss function\n",
    "# criterion = nn.MSELoss()\n",
    "# optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
    "\n",
    "# # Training loop\n",
    "# epochs = 100\n",
    "# for epoch in range(epochs):\n",
    "#     optimizer.zero_grad()\n",
    "#     reconstructed, latent_features = model(X_tensor)\n",
    "#     loss = criterion(reconstructed, X_tensor)  # Reconstruction Loss\n",
    "#     loss.backward()\n",
    "#     optimizer.step()\n",
    "    \n",
    "#     if epoch % 10 == 0:\n",
    "#         print(f\"Epoch {epoch}/{epochs}, Loss: {loss.item():.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4d89e643-22aa-47f3-a061-22f81762d289",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract decoded uputput as K-means input\n",
    "# X = reconstructed.detach().numpy()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6de8bf63-f131-4148-b51d-aba6db7d6db5",
   "metadata": {},
   "source": [
    "## K-Means Clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "caf52f3f-188a-4cf7-9d9d-2c3adc328785",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create varable for K-Means\n",
    "X = pca_filtered_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfa1c94d-9530-4482-9ca2-df9ae1da3298",
   "metadata": {},
   "source": [
    "### Shiloutte Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b013227c-5dbe-4657-b87b-d86e093c6df2",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_200/922509719.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0mkmeans_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m    \u001b[0;31m# set current hyper parameter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0mkmeans_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m          \u001b[0;31m# fit model on data, this will find clusters based on parameter p\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m     \u001b[0mss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msilhouette_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkmeans_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabels_\u001b[0m\u001b[0;34m)\u001b[0m   \u001b[0;31m# calculate silhouette_score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m     \u001b[0msilhouette_scores\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mss\u001b[0m\u001b[0;34m]\u001b[0m       \u001b[0;31m# store all the scores\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Parameter:'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Score'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/CondaEnvPython37/lib/python3.7/site-packages/sklearn/metrics/cluster/_unsupervised.py\u001b[0m in \u001b[0;36msilhouette_score\u001b[0;34m(X, labels, metric, sample_size, random_state, **kwds)\u001b[0m\n\u001b[1;32m    115\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 117\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msilhouette_samples\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    118\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/CondaEnvPython37/lib/python3.7/site-packages/sklearn/metrics/cluster/_unsupervised.py\u001b[0m in \u001b[0;36msilhouette_samples\u001b[0;34m(X, labels, metric, **kwds)\u001b[0m\n\u001b[1;32m    231\u001b[0m         \u001b[0m_silhouette_reduce\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel_freqs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlabel_freqs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    232\u001b[0m     )\n\u001b[0;32m--> 233\u001b[0;31m     \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mpairwise_distances_chunked\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreduce_func\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreduce_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    234\u001b[0m     \u001b[0mintra_clust_dists\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minter_clust_dists\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    235\u001b[0m     \u001b[0mintra_clust_dists\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mintra_clust_dists\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/CondaEnvPython37/lib/python3.7/site-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36mpairwise_distances_chunked\u001b[0;34m(X, Y, reduce_func, metric, n_jobs, working_memory, **kwds)\u001b[0m\n\u001b[1;32m   1715\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1716\u001b[0m             \u001b[0mX_chunk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msl\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1717\u001b[0;31m         \u001b[0mD_chunk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpairwise_distances\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_chunk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1718\u001b[0m         if (X is Y or Y is None) and PAIRWISE_DISTANCE_FUNCTIONS.get(\n\u001b[1;32m   1719\u001b[0m             \u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/CondaEnvPython37/lib/python3.7/site-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36mpairwise_distances\u001b[0;34m(X, Y, metric, n_jobs, force_all_finite, **kwds)\u001b[0m\n\u001b[1;32m   1887\u001b[0m         \u001b[0mfunc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpartial\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdistance\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcdist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetric\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1888\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1889\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_parallel_pairwise\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1891\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/CondaEnvPython37/lib/python3.7/site-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36m_parallel_pairwise\u001b[0;34m(X, Y, func, n_jobs, **kwds)\u001b[0m\n\u001b[1;32m   1428\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1429\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0meffective_n_jobs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1430\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1431\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1432\u001b[0m     \u001b[0;31m# enforce a threading backend to prevent data communication overhead\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/CondaEnvPython37/lib/python3.7/site-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36meuclidean_distances\u001b[0;34m(X, Y, Y_norm_squared, squared, X_norm_squared)\u001b[0m\n\u001b[1;32m    328\u001b[0m             )\n\u001b[1;32m    329\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 330\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_euclidean_distances\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_norm_squared\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_norm_squared\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msquared\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    331\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    332\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/CondaEnvPython37/lib/python3.7/site-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36m_euclidean_distances\u001b[0;34m(X, Y, X_norm_squared, Y_norm_squared, squared)\u001b[0m\n\u001b[1;32m    372\u001b[0m         \u001b[0mdistances\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mXX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    373\u001b[0m         \u001b[0mdistances\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mYY\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 374\u001b[0;31m     \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmaximum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdistances\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdistances\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    376\u001b[0m     \u001b[0;31m# Ensure that distances between vectors and themselves are set to 0.0.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "#Evaluate how many clusters - shiloutte score\n",
    "\n",
    "# candidate values for our number of cluster\n",
    "parameters = list(range(2,11))\n",
    "\n",
    "# instantiating ParameterGrid, pass number of clusters as input\n",
    "parameter_grid = ParameterGrid({'n_clusters': parameters})\n",
    "best_score = -1\n",
    "kmeans_model = KMeans()     # instantiating KMeans model\n",
    "silhouette_scores = []\n",
    "\n",
    "# evaluation based on silhouette_score\n",
    "for p in parameter_grid:\n",
    "    kmeans_model.set_params(**p)    # set current hyper parameter\n",
    "    kmeans_model.fit(X)          # fit model on data, this will find clusters based on parameter p\n",
    "    ss = silhouette_score(X, kmeans_model.labels_)   # calculate silhouette_score\n",
    "    silhouette_scores += [ss]       # store all the scores\n",
    "    print('Parameter:', p, 'Score', ss)\n",
    "    # check p which has the best score\n",
    "    if ss > best_score:\n",
    "        best_score = ss\n",
    "        best_grid = p\n",
    "        \n",
    "# plotting silhouette score\n",
    "plt.bar(range(len(silhouette_scores)), list(silhouette_scores), align='center', color='#722f59', width=0.5)\n",
    "plt.xticks(range(len(silhouette_scores)), list(parameters))\n",
    "plt.title('Silhouette Score', fontweight='bold')\n",
    "plt.xlabel('Number of Clusters')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22d07bb3-c821-46a5-9ec5-a5f4cce677c4",
   "metadata": {},
   "source": [
    "### Elbow Method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "9d6c8f0b-eb6d-4a22-aaf5-d379d5b9e9a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlUAAAGwCAYAAACAZ5AeAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/NK7nSAAAACXBIWXMAAA9hAAAPYQGoP6dpAABeqElEQVR4nO3deVhU9f4H8PewzLAOqzCAiKACimiohaiYJYleM82uevmRlUtmaeaSV703l+rmWreyXLLuzVZNu5nmGrkmIiqKsigCoqiAqMAMqKzz/f1BnpzABB04A7xfzzPP05zzmTOfGe/1vP3OZ84ohBACRERERPRAzORugIiIiKg5YKgiIiIiMgKGKiIiIiIjYKgiIiIiMgKGKiIiIiIjYKgiIiIiMgKGKiIiIiIjsJC7gZZEr9cjJycH9vb2UCgUcrdDREREdSCEQHFxMTw9PWFmdvf1KIaqRpSTkwNvb2+52yAiIqL7cPHiRbRu3fqu+xmqGpG9vT2A6j8UtVotczdERERUFzqdDt7e3tJ5/G4YqhrR7Y/81Go1QxUREVETc6/RHQ6qExERERkBQxURERGRETBUERERERkBQxURERGRETBUERERERkBQxURERGRETBUERERERkBQxURERGRETBUERERERkBQxURERGRETBUERERERkBQxURERGRETBUNQNCCBzKuIayyiq5WyEiImqxGKqagVe+OY7/+ywe3ydckrsVIiKiFouhqhl4uK0zAGDVvkxUVOll7oaIiKhlYqhqBqIeaQNXOyUuFd7CphOX5W6HiIioRWKoagasleZ4MdwPALBybwaq9ELmjoiIiFoehqpm4tmePnCyscT56zex9VSO3O0QERG1OAxVzYStygLj+vgCAD7ekwE9V6uIiIgaFUNVM/Jcr7awt7JAen4Jdqbkyd0OERFRi8JQ1YyorSwxpldbAMBHezIgBFeriIiIGovsoery5ct49tln4eLiAmtrawQHB+PYsWO11k6cOBEKhQIffPCBwfaCggJER0dDrVbD0dER48aNQ0lJiUHNqVOnEB4eDisrK3h7e2Pp0qU1jr9x40YEBgbCysoKwcHB2L59u8F+IQTmzZsHDw8PWFtbIyIiAunp6Q/2BhjZ2D6+sFWa43SuDrtP58vdDhERUYsha6gqLCxE7969YWlpiR07diA1NRXvvfcenJycatRu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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Evaluate How many clusters - Elbow method\n",
    "\n",
    "#Initialize Parameters\n",
    "kmeans_kwargs = {\n",
    "\"init\": \"random\",\n",
    "\"n_init\": 10,\n",
    "\"random_state\": 1,\n",
    "}\n",
    "\n",
    "#create list to hold SSE values for each k\n",
    "sse = []\n",
    "for k in range(1, 11):\n",
    "    kmeans = KMeans(n_clusters=k, **kmeans_kwargs)\n",
    "    kmeans.fit(X)\n",
    "    sse.append(kmeans.inertia_)\n",
    "\n",
    "#visualize results\n",
    "plt.plot(range(1, 11), sse)\n",
    "plt.xticks(range(1, 11))\n",
    "plt.xlabel(\"Number of Clusters\")\n",
    "plt.ylabel(\"SSE\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "5def32b0-a812-436d-ab7c-ebf6c75233b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply K-Means to Optimal number of clusters\n",
    "\n",
    "# Fit\n",
    "km = KMeans(n_clusters=3)\n",
    "km.fit(X)\n",
    "\n",
    "#Add Columns to df with labels\n",
    "X['Cluster'] = km.labels_\n",
    "\n",
    "#Rename\n",
    "df = X"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16ccb5c2-c259-4416-8659-640d30200613",
   "metadata": {},
   "source": [
    "## Label Distriburion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "f0979fe6-b802-4519-87ff-ee55f180bb72",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>purchase_lead</th>\n",
       "      <th>length_of_stay</th>\n",
       "      <th>flight_hour</th>\n",
       "      <th>wants_extra_baggage</th>\n",
       "      <th>wants_preferred_seat</th>\n",
       "      <th>wants_in_flight_meals</th>\n",
       "      <th>flight_duration</th>\n",
       "      <th>booking_complete</th>\n",
       "      <th>age</th>\n",
       "      <th>credit_score</th>\n",
       "      <th>...</th>\n",
       "      <th>destination_London</th>\n",
       "      <th>destination_Los Angeles</th>\n",
       "      <th>destination_Minneapolis</th>\n",
       "      <th>destination_New York</th>\n",
       "      <th>destination_Paris</th>\n",
       "      <th>destination_San Francisco</th>\n",
       "      <th>destination_Tokyo</th>\n",
       "      <th>airline_carrier_British Airways</th>\n",
       "      <th>airline_carrier_Emirates</th>\n",
       "      <th>airline_carrier_Lufthansa</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cluster</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>...</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "      <td>49930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>...</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "      <td>50086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>...</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "      <td>49984</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         purchase_lead  length_of_stay  flight_hour  wants_extra_baggage  \\\n",
       "Cluster                                                                    \n",
       "0                49930           49930        49930                49930   \n",
       "2                50086           50086        50086                50086   \n",
       "1                49984           49984        49984                49984   \n",
       "\n",
       "         wants_preferred_seat  wants_in_flight_meals  flight_duration  \\\n",
       "Cluster                                                                 \n",
       "0                       49930                  49930            49930   \n",
       "2                       50086                  50086            50086   \n",
       "1                       49984                  49984            49984   \n",
       "\n",
       "         booking_complete    age  credit_score  ...  destination_London  \\\n",
       "Cluster                                         ...                       \n",
       "0                   49930  49930         49930  ...               49930   \n",
       "2                   50086  50086         50086  ...               50086   \n",
       "1                   49984  49984         49984  ...               49984   \n",
       "\n",
       "         destination_Los Angeles  destination_Minneapolis  \\\n",
       "Cluster                                                     \n",
       "0                          49930                    49930   \n",
       "2                          50086                    50086   \n",
       "1                          49984                    49984   \n",
       "\n",
       "         destination_New York  destination_Paris  destination_San Francisco  \\\n",
       "Cluster                                                                       \n",
       "0                       49930              49930                      49930   \n",
       "2                       50086              50086                      50086   \n",
       "1                       49984              49984                      49984   \n",
       "\n",
       "         destination_Tokyo  airline_carrier_British Airways  \\\n",
       "Cluster                                                       \n",
       "0                    49930                            49930   \n",
       "2                    50086                            50086   \n",
       "1                    49984                            49984   \n",
       "\n",
       "         airline_carrier_Emirates  airline_carrier_Lufthansa  \n",
       "Cluster                                                       \n",
       "0                           49930                      49930  \n",
       "2                           50086                      50086  \n",
       "1                           49984                      49984  \n",
       "\n",
       "[3 rows x 37 columns]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label_test = df.groupby('Cluster', sort = False).count()\n",
    "label_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c39ab55b-2acd-4dc1-ac90-165253ded5e7",
   "metadata": {},
   "source": [
    "## Nueral Network"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a22e0f86-abf0-404d-93ae-2d24ab77327c",
   "metadata": {},
   "source": [
    "### Define Dataset and Dataloaders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "15f38ff1-26dc-449a-a1df-fbd05a414bab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Separate training features from label column\n",
    "train_labels = df[\"Cluster\"].copy()\n",
    "df = df.drop(\"Cluster\", axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "laughing-salvation",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Create train, test, valid split (60,20,20)\n",
    "x_data = torch.tensor(df.values, dtype=torch.float32)\n",
    "y_data = torch.tensor(train_labels.values, dtype=torch.float32)\n",
    "\n",
    "\n",
    "x, x_test, y, y_test = train_test_split(x_data,y_data,test_size=0.2,train_size=0.8, shuffle = True)\n",
    "x_train, x_valid, y_train, y_valid = train_test_split(x,y,test_size = 0.25,train_size =0.75, shuffle = True)\n",
    "\n",
    "#x_train, x_valid, y_train, y_valid = train_test_split(x_data, y_data, test_size=0.25, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "ambient-veteran",
   "metadata": {},
   "outputs": [],
   "source": [
    "class TabularDataset(Dataset):\n",
    "    def __init__(self, x: torch.Tensor, y: torch.Tensor = None) -> None:\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "\n",
    "    def __len__(self) -> int:\n",
    "        return len(self.x)\n",
    "\n",
    "    def __getitem__(self, idx: int):\n",
    "        if self.y is None:\n",
    "            # For test dataset\n",
    "            return self.x[idx], None\n",
    "        else:\n",
    "            # For train and validation dataset\n",
    "            return self.x[idx], self.y[idx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "swiss-pioneer",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create dataset\n",
    "train_dataset = TabularDataset(x_train, y_train)\n",
    "validation_dataset = TabularDataset(x_valid, y_valid)\n",
    "test_dataset = TabularDataset(x_test, None)\n",
    "\n",
    "# Create DataLoader\n",
    "train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n",
    "validation_loader = DataLoader(train_dataset, batch_size=128, shuffle=False)\n",
    "test_loader = DataLoader(train_dataset, batch_size=128, shuffle=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6193d99-f4d7-437c-b6cd-e33e88758074",
   "metadata": {},
   "source": [
    "### Define Model and Optimizers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "headed-harris",
   "metadata": {},
   "outputs": [],
   "source": [
    "class TitanicModel(nn.Module):\n",
    "    def __init__(self, input_dim: int, num_classes: int = 3) -> None:\n",
    "        super().__init__()\n",
    "        self.linear1 = nn.Linear(input_dim, 64)\n",
    "        self.linear2 = nn.Linear(64, 128)\n",
    "        self.linear3 = nn.Linear(128, 96)\n",
    "        self.linear4 = nn.Linear(96, 32)\n",
    "        self.linear5 = nn.Linear(32, num_classes)\n",
    "        self.relu = nn.ReLU()\n",
    "        self.dropout = nn.Dropout(p=0.25)\n",
    "        self.softmax = nn.Softmax(dim=1)\n",
    "\n",
    "    def forward(self, x: torch.Tensor) -> torch.Tensor:\n",
    "        x = self.dropout(self.relu(self.linear1(x)))\n",
    "        x = self.dropout(self.relu(self.linear2(x)))\n",
    "        x = self.dropout(self.relu(self.linear3(x)))\n",
    "        x = self.dropout(self.relu(self.linear4(x)))\n",
    "        output = self.softmax(self.linear5(x))\n",
    "        return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "alike-mounting",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assign the available processor to device\n",
    "device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n",
    "\n",
    "model = TitanicModel(37).to(device)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8715df00-e085-44ef-bc99-7f26fc4fc19f",
   "metadata": {},
   "source": [
    "### Train and Save Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "693e108c-b4c6-44dd-9547-b60527d22e92",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define Loss function and optimizer\n",
    "\n",
    "loss_fn = torch.nn.CrossEntropyLoss()\n",
    "\n",
    "optimizer = torch.optim.SGD(params=model.parameters(), lr=0.003)\n",
    "\n",
    "\n",
    "def accuracy_fn(y_true: torch.Tensor, y_pred: torch.Tensor) -> float:\n",
    "    correct = torch.eq(y_true, y_pred).sum().item()\n",
    "    acc = correct / len(y_pred) * 100\n",
    "    return acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "realistic-while",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch:    0 | Train Loss: 1.09905, Accuracy: 32.74% | Validation Loss: 1.09884, Accuracy: 33.26%\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_200/2488925567.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     60\u001b[0m             \u001b[0my_valid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_valid\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mLongTensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 62\u001b[0;31m             \u001b[0mvalid_logits\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_valid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     63\u001b[0m             \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalid_logits\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# convert logits into predictions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/CondaEnvPython37/lib/python3.7/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1192\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1193\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1194\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1195\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1196\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/tmp/ipykernel_200/1612656760.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear3\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdropout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear4\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/CondaEnvPython37/lib/python3.7/site-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1192\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1193\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1194\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1195\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1196\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/CondaEnvPython37/lib/python3.7/site-packages/torch/nn/modules/linear.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbias\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mextra_repr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# Number of epochs\n",
    "epochs = 1000\n",
    "\n",
    "\n",
    "# Empty loss lists to track values\n",
    "epoch_count, train_loss_values, valid_loss_values = [], [], []\n",
    "\n",
    "# Loop through the data\n",
    "for epoch in range(epochs):\n",
    "\n",
    "    # Put the model in training mode\n",
    "    model.train()\n",
    "\n",
    "    total_train_loss: float = 0\n",
    "    total_train_acc: float = 0\n",
    "    num_train_batches: float = 0\n",
    "\n",
    "    for x_train, y_train in train_loader:\n",
    "\n",
    "        # Send data to the device\n",
    "        x_train = x_train.to(device)\n",
    "        y_train = y_train.type(torch.LongTensor).to(device)\n",
    "\n",
    "        # Forward pass to get predictions\n",
    "        y_logits = model(x_train)\n",
    "        # Convert logits into predictions\n",
    "        y_pred = torch.argmax(y_logits, dim=1)\n",
    "\n",
    "        # Compute the loss\n",
    "        loss = loss_fn(y_logits, y_train)\n",
    "        # Calculate the accuracy; convert the labels to integers\n",
    "        acc = accuracy_fn(y_train, y_pred)\n",
    "\n",
    "        # Reset the gradients so they don't accumulate each iteration\n",
    "        optimizer.zero_grad()\n",
    "        # Backward pass: backpropagate the prediction loss\n",
    "        loss.backward()\n",
    "        # Gradient descent: adjust the parameters by the gradients collected in the backward pass\n",
    "        optimizer.step()\n",
    "\n",
    "        # Accumulate loss and accuracy\n",
    "        total_train_loss += loss.item()\n",
    "        total_train_acc += acc\n",
    "        num_train_batches += 1\n",
    "\n",
    "    avg_train_loss = total_train_loss / num_train_batches\n",
    "    avg_train_acc = total_train_acc / num_train_batches\n",
    "\n",
    "    # Put the model in evaluation mode\n",
    "    model.eval()\n",
    "\n",
    "    total_valid_loss: float = 0\n",
    "    total_valid_acc: float = 0\n",
    "    num_valid_batches: float = 0\n",
    "\n",
    "    with torch.inference_mode():\n",
    "        for x_valid, y_valid in train_loader:\n",
    "            # Send data to the device\n",
    "            x_valid = x_valid.to(device)\n",
    "            y_valid = y_valid.type(torch.LongTensor).to(device)\n",
    "\n",
    "            valid_logits = model(x_valid)\n",
    "            y_pred = torch.argmax(valid_logits, dim=1)  # convert logits into predictions\n",
    "\n",
    "            valid_loss = loss_fn(valid_logits, y_valid)\n",
    "            valid_acc = accuracy_fn(y_pred, y_valid)\n",
    "\n",
    "            # Accumulate validation loss and accuracy\n",
    "            total_valid_loss += valid_loss.item()\n",
    "            total_valid_acc += valid_acc\n",
    "            num_valid_batches += 1\n",
    "\n",
    "    avg_valid_loss = total_valid_loss / num_valid_batches\n",
    "    avg_valid_acc = total_valid_acc / num_valid_batches\n",
    "\n",
    "    # Print progress a total of 20 times\n",
    "    if epoch % int(epochs / 20) == 0:\n",
    "        print(\n",
    "            f\"Epoch: {epoch:4d} | Train Loss: {avg_train_loss:.5f}, Accuracy: {avg_train_acc:.2f}% | \"\n",
    "            f\"Validation Loss: {avg_valid_loss:.5f}, Accuracy: {avg_valid_acc:.2f}%\"\n",
    "        )\n",
    "        epoch_count.append(epoch)\n",
    "        train_loss_values.append(avg_train_loss)\n",
    "        valid_loss_values.append(avg_valid_loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "parliamentary-sensitivity",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot some of the results\n",
    "plt.plot(epoch_count, train_loss_values, label=\"Training Loss\")\n",
    "plt.plot(epoch_count, valid_loss_values, label=\"Validation Loss\")\n",
    "plt.title(\"Training & Validation Loss Curves\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.xlabel(\"Epochs\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "forbidden-oxford",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a directory for models\n",
    "MODEL_PATH = Path(\"models\")\n",
    "MODEL_PATH.mkdir(parents=True, exist_ok=True)\n",
    "\n",
    "# Create a model save path\n",
    "MODEL_NAME = \"vector_centralized_pytorch_model.pth\"\n",
    "MODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME\n",
    "\n",
    "# Save the model state dict\n",
    "torch.save(obj=model.state_dict(), f=MODEL_SAVE_PATH)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "fl4health_bootcamp",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
